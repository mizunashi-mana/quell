module Main {..} where

-- kind signature can ignored: `type Natural: Type`
data Natural where
  Succ: Natural -> Natural
  Zero: Natural

type PlusNum: Type -> Type
record PlusNum a = PlusNum {
  fromInteger: Integer -> a,
  +: a -> a -> a,
}

impl plusNumForNatural: PlusNum Natural
plusNumForNatural = PlusNum {..} where
  fromInteger = \
    0 -> Zero
    n -> Succ $ fromInteger (n - 1)

  x + y = case x of
    Zero    -> y
    Succ x' -> Succ $ x' + y

fromInteger: @a. PlusNum a => Integer -> a
fromInteger %d = d.fromInteger

module Fib begin
  fib: @a. PlusNum a => Natural -> a
  fib @a %d n = go n a0 a1
    where
      a0 = fromInteger %d 0
      a1 = fromInteger 1 -- dictionary inference

      go: a -> a -> a -> a
      go m x y = case m of
        Zero    -> x
        Succ m' -> go m' y (x d.+ y)
end

main :: IO ()
main = print $ Fib.fib 10
