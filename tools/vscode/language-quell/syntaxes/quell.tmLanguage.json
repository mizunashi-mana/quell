{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Quell",
    "fileTypes": [
        "qq"
    ],
    "patterns": [
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.entity.quell"
                },
                "2": {
                    "name": "punctuation.definition.entity.quell"
                }
            },
            "comment": "In case this regex seems unusual for an infix operator, note that Quell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).",
            "match": "(`)[\\p{Ll}\\p{Lo}_][\\p{Ll}\\p{Lo}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{Lm}\\p{M}\\p{Nl}\\p{No}]*(`)",
            "name": "keyword.operator.function.infix.quell"
        },
        {
            "match": "\\(\\)",
            "name": "constant.language.unit.quell"
        },
        {
            "match": "\\[\\]",
            "name": "constant.language.empty-list.quell"
        },
        {
            "begin": "\\b(module)\\b",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.quell"
                }
            },
            "end": "\\b(where)\\b",
            "endCaptures": {
                "1": {
                    "name": "keyword.other.quell"
                }
            },
            "name": "meta.declaration.module.quell",
            "patterns": [
                {
                    "include": "#module_name"
                },
                {
                    "match": "[a-z]+",
                    "name": "invalid"
                }
            ]
        },
        {
            "begin": "\\b(trait)\\b",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.quell"
                }
            },
            "end": "\\b(where)\\b",
            "endCaptures": {
                "1": {
                    "name": "keyword.other.quell"
                }
            },
            "name": "meta.declaration.trait.quell",
            "patterns": [
                {
                    "match": "[\\p{Lu}\\p{Lt}][\\p{Ll}\\p{Lo}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{Lm}\\p{M}\\p{Nl}\\p{No}]*",
                    "name": "entity.other.inherited-trait.quell"
                },
                {
                    "match": "\\b[\\p{Ll}\\p{Lo}_][\\p{Ll}\\p{Lo}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{Lm}\\p{M}\\p{Nl}\\p{No}]*",
                    "name": "variable.other.generic-type.quell"
                }
            ]
        },
        {
            "begin": "\\b(impl)\\b",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.quell"
                }
            },
            "end": "\\b(where)\\b|$",
            "endCaptures": {
                "1": {
                    "name": "keyword.other.quell"
                }
            },
            "name": "meta.declaration.instance.quell",
            "patterns": [
                {
                    "include": "#type_signature"
                }
            ]
        },
        {
            "begin": "\\b(use)\\b",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.quell"
                }
            },
            "end": "($|;|(?=--))",
            "name": "meta.use.quell",
            "patterns": [
                {
                    "match": "\\b(as)\\b",
                    "name": "keyword.other.quell"
                },
                {
                    "include": "#module_name"
                },
                {
                    "include": "#module_exports"
                },
                {
                    "include": "#strings"
                }
            ]
        },
        {
            "begin": "(derive)\\s*\\(",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.quell"
                }
            },
            "end": "\\)",
            "name": "meta.derive.quell",
            "patterns": [
                {
                    "match": "\\b[\\p{Lu}\\p{Lt}][\\p{Ll}\\p{Lo}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{Lm}\\p{M}\\p{Nl}\\p{No}]*",
                    "name": "entity.other.inherited-class.quell"
                }
            ]
        },
        {
            "match": "\\b(derive|where|data|type|newtype|default)\\b",
            "name": "keyword.other.quell"
        },
        {
            "match": "\\b(infix)\\b",
            "name": "keyword.operator.quell"
        },
        {
            "match": "\\b(do|match|with|when|let|in)\\b",
            "name": "keyword.control.quell"
        },
        {
            "comment": "Floats are always decimal",
            "match": "\\b[+-]?\\p{Nd}[\\p{Nd}_]*(\\.\\p{Nd}[\\p{Nd}_]*)?([eE][+-]?\\p{Nd}[\\p{Nd}_]*)?\\b",
            "name": "constant.numeric.float.quell"
        },
        {
            "match": "\\b([+-]?\\p{Nd}[\\p{Nd}_]*|0([bB][0-1][0-1_]*|[oO][0-7][0-7_]*|[xX][\\p{Nd}a-fA-F]))\\b",
            "name": "constant.numeric.quell"
        },
        {
            "include": "#pragma"
        },
        {
            "include": "#strings"
        },
        {
            "begin": "(?x)^(\\s*)\n                (?<fn>\n                  (?:\n                    [\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']* |\n                    \\(\n                      (?!--+\\))\n                      (?:\n                        (?![(),;\\[\\]`{}_\"'])[\\p{S}\\p{P}]\n                      )+\n                    \\)\n                  )\n                  (?:\\s*,\\s*\\g<fn>)?\n                )\n                \\s*(:)",
            "beginCaptures": {
                "2": {
                    "patterns": [
                        {
                            "match": "[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*",
                            "name": "entity.name.function.quell"
                        },
                        {
                            "include": "#infix_op"
                        }
                    ]
                },
                "3": {
                    "name": "keyword.other.double-colon.quell"
                }
            },
            "name": "meta.function.type-declaration.quell",
            "patterns": [
                {
                    "include": "#type_signature"
                }
            ],
            "while": "^\\1\\s+"
        },
        {
            "match": "\\b[\\p{Lu}\\p{Lt}][\\p{Ll}\\p{Lo}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{Lm}\\p{M}\\p{Nl}\\p{No}]*",
            "name": "constant.other.quell"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#infix_op"
        },
        {
            "comment": "In case this regex seems overly general, note that quell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.",
            "match": "((?![(),;\\[\\]`{}_\"'])[\\p{S}\\p{P}])+",
            "name": "keyword.operator.quell"
        },
        {
            "match": ",",
            "name": "punctuation.separator.comma.quell"
        }
    ],
    "repository": {
        "block_comment": {
            "applyEndPatternLast": 1,
            "begin": "\\{-(?!#)",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.quell"
                }
            },
            "end": "-\\}",
            "name": "comment.block.quell",
            "patterns": [
                {
                    "include": "#block_comment"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "begin": "(^[ \\t]+)?(?=--+((?![\\p{S}\\p{P}])|[(),;\\[\\]`{}_\"']))",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.quell"
                        }
                    },
                    "comment": "Operators may begin with '--' as long as they are not entirely composed of '-' characters. This means comments can't be immediately followed by an allowable operator character.",
                    "end": "(?!\\G)",
                    "patterns": [
                        {
                            "begin": "--",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.comment.quell"
                                }
                            },
                            "end": "\\n",
                            "name": "comment.line.double-dash.quell"
                        }
                    ]
                },
                {
                    "include": "#block_comment"
                }
            ]
        },
        "infix_op": {
            "comment": "An operator cannot be composed entirely of '-' characters; instead, it should be matched as a comment.",
            "match": "(\\((?!--+\\))((?![(),;\\[\\]`{}_\"'])[\\p{S}\\p{P}])+\\)|\\(,+\\))",
            "name": "entity.name.function.infix.quell"
        },
        "module_exports": {
            "begin": "\\(",
            "end": "\\)",
            "name": "meta.declaration.exports.quell",
            "patterns": [
                {
                    "match": "\\b[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*",
                    "name": "entity.name.function.quell"
                },
                {
                    "match": "\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*",
                    "name": "storage.type.quell"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.comma.quell"
                },
                {
                    "include": "#infix_op"
                },
                {
                    "comment": "So named because I don't know what to call this.",
                    "match": "\\(.*?\\)",
                    "name": "meta.other.unknown.quell"
                },
                {
                    "include": "#comments"
                }
            ]
        },
        "module_name": {
            "match": "(?<conid>[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(\\.\\g<conid>)?)",
            "name": "support.other.module.quell"
        },
        "pragma": {
            "begin": "\\{-#",
            "end": "#-\\}",
            "name": "meta.preprocessor.quell",
            "patterns": [
                {
                    "comment": "Taken from https://downloads.quell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pragmas",
                    "match": "\\b(LANGUAGE|OPTIONS_GHC|INCLUDE|WARNING|DEPRECATED|MINIMAL|UNPACK|NOUNPACK|SOURCE|OVERLAPPING|OVERLAPPABLE|OVERLAPS|INCOHERENT|INLINE|NOINLINE|INLINABLE|CONLIKE|LINE|RULES|SPECIALIZE|SPECIALISE)\\b",
                    "name": "keyword.other.preprocessor.quell"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.quell"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.quell"
                        }
                    },
                    "name": "string.quoted.double.quell",
                    "patterns": [
                        {
                            "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[0abfnrtv\\\\\\\"'\\$])",
                            "name": "constant.character.escape.quell"
                        },
                        {
                            "match": "\\\\o[0-7]+|\\\\x[\\p{Nd}A-Fa-f]+|\\\\\\p{Nd}+",
                            "name": "constant.character.escape.octal.quell"
                        },
                        {
                            "match": "\\\\\\^[A-Z@\\[\\]\\\\\\^_]",
                            "name": "constant.character.escape.control.quell"
                        },
                        {
                            "begin": "\\\\\\s",
                            "beginCaptures": {
                                "0": {
                                    "name": "constant.character.escape.begin.quell"
                                }
                            },
                            "end": "\\\\",
                            "endCaptures": {
                                "0": {
                                    "name": "constant.character.escape.end.quell"
                                }
                            },
                            "patterns": [
                                {
                                    "match": "\\S+",
                                    "name": "invalid.illegal.character-not-allowed-here.quell"
                                }
                            ]
                        }
                    ]
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.quell"
                        },
                        "2": {
                            "name": "constant.character.escape.quell"
                        },
                        "3": {
                            "name": "constant.character.escape.octal.quell"
                        },
                        "4": {
                            "name": "constant.character.escape.hexadecimal.quell"
                        },
                        "5": {
                            "name": "constant.character.escape.control.quell"
                        },
                        "6": {
                            "name": "punctuation.definition.string.end.quell"
                        }
                    },
                    "match": "(?x)\n\t\t\t\t\t(')\n\t\t\t\t\t(?:\n\t\t\t\t\t\t[\\ -\\[\\]-~]\t\t\t\t\t\t\t\t# Basic Char\n\t\t\t\t\t  | (\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE\n\t\t\t\t\t\t\t|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS\n\t\t\t\t\t\t\t|US|SP|DEL|[0abfnrtv\\\\\\\"'\\&]))\t\t# Escapes\n\t\t\t\t\t  | (\\\\o[0-7]+)\t\t\t\t\t\t\t\t# Octal Escapes\n\t\t\t\t\t  | (\\\\x[\\p{Nd}A-Fa-f]+)\t\t\t\t\t\t# Hexadecimal Escapes\n\t\t\t\t\t  | (\\\\\\^[A-Z@\\[\\]\\\\\\^_])\t\t\t\t\t# Control Chars\n\t\t\t\t\t)\n\t\t\t\t\t(')\n\t\t\t\t\t",
                    "name": "string.quoted.single.quell"
                }
            ]
        },
        "type_signature": {
            "patterns": [
                {
                    "include": "#pragma"
                },
                {
                    "match": "\\b(->|<-)",
                    "name": "keyword.other.arrow.quell"
                },
                {
                    "match": "\\b(=>|<=)",
                    "name": "keyword.other.big-arrow.quell"
                },
                {
                    "match": "\\b[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*",
                    "name": "variable.other.generic-type.quell"
                },
                {
                    "match": "\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*",
                    "name": "storage.type.quell"
                },
                {
                    "match": "\\(\\)",
                    "name": "support.constant.unit.quell"
                },
                {
                    "include": "#comments"
                }
            ]
        }
    },
    "scopeName": "source.quell"
}
